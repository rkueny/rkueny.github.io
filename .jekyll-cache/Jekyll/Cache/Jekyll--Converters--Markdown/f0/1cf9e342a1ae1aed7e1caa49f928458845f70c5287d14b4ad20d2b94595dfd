I"İG<p style="text-align: left;">
  Je me dÃ©cide enfin Ã  Ã©crire un tutoriel pour le dÃ©veloppement d&rsquo;une application Facebook. Et je dois dire que je me fÃ©licite de ne pas l&rsquo;avoir fait avant <img src="http://rkueny.fr/wp-includes/images/smilies/icon_smile.gif" alt=":)" class="wp-smiley" />
</p>

<p style="text-align: left;">
  Pourquoi donc ? Et bien, l&rsquo;API vient de changer de A Ã  Z, fin-avril de cette annÃ©e. Du coup, l&rsquo;ancienne API (the old REST-API sur le wiki Facebook) est dÃ©sormais obsolÃ¨te et risque de ne plus Ãªtre supportÃ©e. Ã‰crire un tuto pour devoir le changer le mois suivantâ€¦ EspÃ©rons que ce ne sera pas la mÃªme chose avec la nouvelle API ! J&rsquo;ai donc nommÃ©e &laquo;&nbsp;Graph API&nbsp;&raquo;
</p>

<p style="text-align: left;">
  <strong>Graph API : quoi de neuf ?</strong>
</p>

<p style="text-align: left;">
  Ã‡a a changÃ© de A Ã  Z. OK. Mais parlons un peu de cette nouvelle API. Du cÃ´tÃ© des dÃ©veloppeurs, il faut savoir que cette API se base dÃ©sormais sur OAuth 2.0 comme Yahoo, Google ou encore Twitter. Facebook commencerait t&rsquo;il Ã  s&rsquo;ouvrir ?
</p>

<p style="text-align: left;">
  Du cÃ´tÃ© utilisateur, une avancÃ©e, qui me plait beaucoup, est apparue lorsqu&rsquo;on doit autoriser une application. On a ce genre de fenÃªtre dÃ©sormais :
</p>

<p style="text-align: left;">
  <img class="size-full wp-image-856 aligncenter" title="27198_395095088552_19292868552_3995134_1102397_n" src="http://rkueny.fr/wp-content/uploads/2010/06/27198_395095088552_19292868552_3995134_1102397_n.jpg" alt="27198_395095088552_19292868552_3995134_1102397_n" width="465" height="257" />
</p>

<p style="text-align: left;">
  Du coup, on sait Ã  quoi on donne accÃ¨s et on peut ainsi mieux contrÃ´ler ses donnÃ©es. Si une application de pronostic, par exemple, demande l&rsquo;accÃ¨s Ã  toutes vos donnÃ©es, on peut lÃ©gitiment se demander pourquoi&#8230;
</p>

<p style="text-align: left;">
  AprÃ¨s ce petit Ã©tat des lieux, entrons donc dans le vif du sujet !<!--more-->Ce premier article va vous permettre de mettre en place le systÃ¨me FBConnect sur votre site. Il va aussi vous permettre de commencer Ã  prendre en main l&rsquo;API, chose pas si facile que Ã§a au premier abord. Le tutoriel s&rsquo;oriente bien sÃ»r vers le PHP 
  
  <img src="http://rkueny.fr/wp-includes/images/smilies/icon_smile.gif" alt=":)" class="wp-smiley" /> FBConnect vous permet de rÃ©colter des informations sur l&rsquo;utilisateur Facebook depuis votre propre serveur.
</p>

<p style="text-align: left;">
  <strong>TÃ©lÃ©chargeons le SDK PHP pour Facebook</strong>
</p>

<p style="text-align: left;">
  Rendez vous donc sur <a title="DÃ©pot Git Facebook API" href="http://github.com/facebook/php-sdk" target="_blank">le dÃ©pÃ´t Git Facebook PHP SDK</a>. TÃ©lÃ©chargez simplement le fichier /src/facebook.php<br /> Mettez le dans un dossier src/ Ã  la racine de vos projets Facebook.
</p>

<p style="text-align: left; padding-left: 30px;">
  /projetsfb<br /> /src<br /> /test<br /> /autre
</p>

<p style="text-align: left;">
  <strong>CrÃ©ez votre application sur Facebook</strong>
</p>

<p style="text-align: left;">
  Pour que votre bouton FBConnect fonctionne, il vous faut crÃ©er une application Facebook. Pour cela, rendez vous donc sur <a title="Create app" href="http://www.facebook.com/developers/createapp.php" target="_blank">&laquo;&nbsp;CrÃ©ez une application Facebook&nbsp;&raquo;</a>. Renseignez le nom de votre application et acceptez les termes des Condition d&rsquo;utilisations de Facebook.<br /> Une fois ceci fait, allez dans l&rsquo;onglet &laquo;&nbsp;Connexion&nbsp;&raquo;, et dans le champ Url Connect entrez le chemin du dossier contenant le index.php (<em>exemple : http://localhost:8888/facebook/test/</em>). Une fois ceci fait, gardez cet onglet ouvert et passons Ã  la suite.
</p>

<p style="text-align: left;">
  <img class="size-full wp-image-862 aligncenter" title="APERCU-APPLI" src="http://rkueny.fr/wp-content/uploads/2010/06/APERCU-APPLI.png" alt="APERCU-APPLI" width="522" height="230" />
</p>

<p style="text-align: left;">
  <strong>TÃ©lÃ©chargez la base pour le FBConnect</strong>
</p>

<p style="text-align: left;">
  Tout le code de ce tutoriel est prÃ©sent sur un de <a title="GitHub R.Kueny Facebook" href="http://github.com/rkueny/fbconnect" target="_blank">mes repositories GitHub</a>.
</p>

<p style="text-align: left;">
  TÃ©lÃ©chargez donc tout les fichiers (le bouton Download Source en haut Ã  droite). Vous n&rsquo;aurez qu&rsquo;Ã  toucher au fichier conf.php et au fichier index.php pour indiquer le chemin vers le fichier facebook.php. Le fichier facebook.php Ã©tant celui que vous avez tÃ©lÃ©chargÃ© auparavant.
</p>

<p style="text-align: left;">
  Je vais d&rsquo;abord vous guider pour utiliser ceci puis j&rsquo;expliquerai les fichiers. Ainsi, dans le fichier conf.php, entrez les donnÃ©es que vous trouverez dans l&rsquo;administration de votre application sur Facebook (l&rsquo;onglet que vous avez gardÃ© ouvert).
</p>

<pre style="text-align: left;">define('APP_ID',Â Â  Â Â Â  Â '');
define('APP_KEY',Â Â  Â Â Â  Â '');
define('APP_SECRET', Â Â  Â '');
define('APP_URL',Â Â  Â Â Â  Â 'http://localhost:8888/api_test/facebook/tests/fbconnect3/index.php');</pre>

<p style="text-align: left;">
  APP_ID Â Â  Â Â Â  Â &#8211;&gt;Â Â  Â l&rsquo;Id de votre application<br /> APP_KEY Â Â  Â &#8211;&gt;Â Â  Â la clÃ© API de votre application<br /> APP_SECRET Â Â  Â &#8211;&gt;Â Â  Â la clÃ© secrÃ¨te de votre application<br /> APP_URLÂ Â  Â Â Â  Â &#8211;&gt;Â Â  Â l&rsquo;url de l&rsquo;index.php de votre FBConnect
</p>

<p style="text-align: left;">
  N&rsquo;oubliez pas de rÃ©gler le chemin pour votre facebook.php dans le index.php.
</p>

<p style="text-align: left;">
  Une fois ceci fait, testez le script et tout devrait marcher. Nous verrons dans un autre billet comme ensuite intÃ©ragir avec Facebook (rÃ©cupÃ©rer des infos ou mettre un statut Ã  jour par exemple).
</p>

<p style="text-align: left;">
  Si vous avez des erreurs, n&rsquo;hÃ©sitez pas Ã  aller voir Ã  la fin de ce billet, j&rsquo;en ai rÃ©pertoriÃ© plusieurs. Si votre erreur n&rsquo;est pas dans la liste, n&rsquo;hÃ©sitez pas Ã  poster sur le wiki de mon repository FBConnect.
</p>

<p style="text-align: left;">
  <strong>Comprenons un peu le code</strong>
</p>

<p style="text-align: left;">
  Maintenant que cela fonctionne (ou que vous avez une erreur non rÃ©solue ^^), dÃ©cortiquons un peu le code fichier par fichier voulez vous ?
</p>

<p style="text-align: left;">
  <strong>conf.php</strong>
</p>

<p style="text-align: left;">
  CommenÃ§ons par le fichier que vous avez modifiÃ©. Celui-ci contient donc :<br /> &#8211; l&rsquo;Id de votre application<br /> &#8211; la clÃ© publique de celle-ci<br /> &#8211; la clÃ© privÃ©e<br /> &#8211; et enfin, l&rsquo;url de votre application sur votre serveur.
</p>

<p style="text-align: left;">
  Les clÃ©s servent Ã  l&rsquo;authentification via le protocole OAuth.<br /> L&rsquo;id de votre application, contribue aussi Ã  cette authentification.<br /> Enfin, l&rsquo;url de celle-ci, vous sert pour les mÃ©thodes de login ou de logout.
</p>

<p style="text-align: left;">
  Pour en finir avec ce fichier, j&rsquo;y ai mit une mÃ©thode me permettant d&rsquo;Ã©conomiser quelques lignes lorsque je veux afficher des infos proprement.
</p>

<p style="text-align: left;">
  C&rsquo;en est fini pour le fichier de configuration. Passons Ã  la suite.
</p>

<p style="text-align: left;">
  <strong>index.php</strong>
</p>

<p style="text-align: left;">
  Je vous Ã©pargne l&rsquo;explication des deux premiÃ¨res lignes <img src="http://rkueny.fr/wp-includes/images/smilies/icon_smile.gif" alt=":)" class="wp-smiley" /> Passons Ã  la crÃ©ation d&rsquo;une instance pour la classe Facebook.<br /> Si vous avez dÃ©jÃ  utilisÃ© une API s&rsquo;appuyant sur OAuth, cette syntaxe doit vous Ãªtre familiÃ¨re. On lui passe donc un tableau avec l&rsquo;Id de votre application et votre clÃ© secrÃ¨te. Le troisiÃ¨me argument concerne la gestion des cookies. Mettez les Ã  &lsquo;true&rsquo;, en effet, nous nous basons ensuite sur la mÃ©thode getSession() et celle-ci s&rsquo;appuie sur l&rsquo;utilisation de cookies. Si vous mettez Ã  &lsquo;false&rsquo; cela peut marcher, mais les urls seront franchement moches (Passage de l&rsquo;Array sÃ©ralizÃ©).
</p>

<p style="text-align: left;">
  Ensuite, $facebook-&gt;getSession() vous retourne les renseignements sur la session actuelle. Elle vous retourne donc :<br /> &#8211; rien si l&rsquo;utilisateur n&rsquo;est pas connectÃ©<br /> &#8211;
</p>

<pre style="text-align: left;">Array(
[access_token] =&gt; xxx
[expires] =&gt; 0
[secret] =&gt; xxx
[session_key] =&gt;Â  xxx
[sig] =&gt; xxx
[uid] =&gt; xxx
)</pre>

<p style="text-align: left;">
  si l&rsquo;utilisateur est connectÃ©. Ce sont donc les informations de la session en cours, ainsi que l&rsquo;uid de l&rsquo;utilisateur.
</p>

<p style="text-align: left;">
  Ainsi, si $session existe, on pourra essayer de rÃ©cupÃ©rer des informations sur l&rsquo;utilisateur par la suite.
</p>

<p style="text-align: left;">
  On met $fbme Ã  null pour pouvoir la tester ensuite mÃªme si le test sur $session n&rsquo;est pas ok.
</p>

<p style="text-align: left;">
  Lorsque l&rsquo;on fait if($session), on vÃ©rifie en fait la session est bien initialisÃ© et donc si l&rsquo;utilisateur est bien connectÃ©.
</p>

<p style="text-align: left;">
  Ensuite, si $session est ok, on rÃ©cupÃ¨re l&rsquo;uid de l&rsquo;utilisateur via la mÃ©thode getUser(). On pourrait aussi utiliser $session[&lsquo;uid&rsquo;] bien entendu. C&rsquo;est plus joli comme Ã§a non ? <img src="http://rkueny.fr/wp-includes/images/smilies/icon_biggrin.gif" alt=":D" class="wp-smiley" /><br /> Puis on rÃ©cupÃ¨re toutes les informations auxquelles l&rsquo;utilisateur nous a donnÃ© accÃ¨s. Mais oÃ¹ y a t&rsquo;il autorisÃ© l&rsquo;accÃ¨s ? Vous verrez Ã§a dans la suite <img src="http://rkueny.fr/wp-includes/images/smilies/icon_wink.gif" alt=";)" class="wp-smiley" />
</p>

<p style="text-align: left;">
  Passons maintenant au fichier contenant le js.
</p>

<p style="text-align: left;">
  <strong>js.php</strong>
</p>

<p style="text-align: left;">
  Tout d&rsquo;abord, l&rsquo;extension est en .php pour pouvoir y insÃ©rer l&rsquo;Id de notre application ainsi que l&rsquo;url de notre serveur.<br /> Attardons nous sur le code maintenant. Je prÃ©viens de suite, je ne suis pas un gÃ©nie du js <img src="http://rkueny.fr/wp-includes/images/smilies/icon_smile.gif" alt=":)" class="wp-smiley" /> Ce code est fonctionnel, je vais plus ou moins vous l&rsquo;expliquer. Si quelqu&rsquo;un se sent de l&rsquo;expliquer plus en profondeur je suis preneur <img src="http://rkueny.fr/wp-includes/images/smilies/icon_smile.gif" alt=":)" class="wp-smiley" /><br /> De plus, dans un billet qui suivra, j&rsquo;expliquerai aussi le systÃ¨me de connexion via le php.
</p>

<p style="text-align: left;">
  Si vous avez remarquÃ©, on n&rsquo;a encore demandÃ© nulle part l&rsquo;identification de l&rsquo;utilisateur. Et bien, nous allons effectuer cela via ce fichier js.
</p>

<p style="text-align: left;">
  Les premiÃ¨res lignes permettent un chargement asynchrone de la librairie JS SDK de Facebook. Du coup, ce lancement doit se situer aprÃ¨s l&rsquo;ouverture du tag <body>. Les lignes 2 Ã  19 font cela. Je vais tout de mÃªme vous en dire plus <img src="http://rkueny.fr/wp-includes/images/smilies/icon_smile.gif" alt=":)" class="wp-smiley" />
&lt;/p&gt;

<p style="text-align: left;">
  Le FB.init permet l&rsquo;initialisation de l&rsquo;objet. Il a besoin de l&rsquo;Id de votre application, de mettre les cookies Ã  true aussi. L&rsquo;option status doit aussi Ãªtre Ã  true. Cela vous permet de connaitre l&rsquo;Ã©tat de login (connectÃ©/dÃ©connectÃ©) de l&rsquo;utilisateur. Enfin, activez le xfbml pour permettre le parsage du XFBML (HTML spÃ©cial Facebook).<br /> Ensuite, les FB.Event dÃ©clenchent les fonctions login ou logout. Celles-ci sont liÃ©es Ã  un bouton spÃ©cial Facebook que nous verrons dans view.php. (login(); est appelÃ© lorsque l&rsquo;Ã©vÃ©nement &lsquo;auth.login&rsquo; est jouÃ© par exemple).
</p>

<p style="text-align: left;">
  Les fonctions login et logout redirigent l&rsquo;utilisateur vers l&rsquo;url de votre application. Nous verrons dans le fichier view.php ce qui se passe en mÃªme temps.
</p>

<p style="text-align: left;">
  Enfin, la fonction qui se dÃ©clenche en mÃªme temps que le FB.init inclut simplement la librairie JS SDK de Facebook dans la langue dÃ©sirÃ©e (fr_FR ou en_US par exemple).
</p>

<p style="text-align: left;">
  Nous avons donc fait le tour du js (y&rsquo;en pas plus promis ;), passons donc au dernier fichier.
</p>

<p style="text-align: left;">
  <strong>view.php</strong>
</p>

<p style="text-align: left;">
  Vous remarquez que l&rsquo;en-tÃªte est un peu bizarre. En effet, pour parser le XFBML il nous faut ajouter xmlns:fb=&nbsp;&raquo;http://www.facebook.com/2008/fbml&nbsp;&raquo;.
</p>

<p style="text-align: left;">
  Le &lt;div id=&nbsp;&raquo;fb-root&nbsp;&raquo;&gt; est prÃ©sent pour intÃ©grer la librairie JS SDK de Facebook via le js.php.
</p>

<p style="text-align: left;">
  Enfin, la seule chose rÃ©ellement intÃ©ressante de ce fichier est le bouton <fb:login-button>. C&rsquo;est celui-lÃ  qui sert Ã  la connexion et Ã  la dÃ©connexion de l&rsquo;utilisateur.
&lt;/p&gt;

<p style="text-align: left;">
  L&rsquo;option &laquo;&nbsp;autologoutlink&nbsp;&raquo; est mise Ã  true. Cela permet de transformer le bouton &laquo;&nbsp;Se connecter&nbsp;&raquo; en &laquo;&nbsp;Se dÃ©connecter&nbsp;&raquo; lorsque l&rsquo;utilisateur n&rsquo;est plus connectÃ©. Si vous mettez Ã  false, vous devrez cacher le bouton via le js (et je vous ai promis qu&rsquo;il n&rsquo;y en aurait plus <img src="http://rkueny.fr/wp-includes/images/smilies/icon_smile.gif" alt=":)" class="wp-smiley" />
</p>

<p style="text-align: left;">
  Ensuite, l&rsquo;option &laquo;&nbsp;perms&nbsp;&raquo; vous permet de dÃ©finir ce dont vous avez besoin dans votre application. Vous n&rsquo;aurez accÃ¨s qu&rsquo;Ã  cela. Dans l&rsquo;exemple nous avons accÃ¨s Ã  l&rsquo;email de l&rsquo;utilisateur, sa date d&rsquo;anniversaire. Nous pouvons aussi mettre Ã  jour son profil et publier quelque chose sur son mur. Les infos &laquo;&nbsp;de base&nbsp;&raquo; sont tout le temps accessibles (nom/prÃ©nom/ville/etcâ€¦).
</p>

<p style="text-align: left;">
  Pour la liste des arguments pour &laquo;&nbsp;perms&nbsp;&raquo;, je vous renvois Ã  <a title="Les permissions facebook" href="http://developers.facebook.com/docs/authentication/permissions" target="_blank">cette page du wiki</a>.
</p>

<p style="text-align: center;">
  <img class="size-full wp-image-753 aligncenter" title="facebook-small-logo" src="http://rkueny.fr/wp-content/uploads/2010/01/facebook-small-logo.png" alt="facebook-small-logo" width="229" height="229" />
</p>

<p style="text-align: left;">
  Et voilÃ , nous en avons fini de l&rsquo;analyse du code <img src="http://rkueny.fr/wp-includes/images/smilies/icon_smile.gif" alt=":)" class="wp-smiley" />
</p>

<p style="text-align: left;">
  J&rsquo;ai encore quelques petites choses Ã  vous dire. Tout d&rsquo;abord, sachez que lorsque que vous autorisez une application Ã  accÃ©der Ã  votre mail, celle-ci y a accÃ¨s en clair. Vous Ãªtes prÃ©venus <img src="http://rkueny.fr/wp-includes/images/smilies/icon_smile.gif" alt=":)" class="wp-smiley" />
</p>

<p style="text-align: left;">
  Voyons maintenant les erreurs rencontrÃ©es durant diffÃ©rents test. Je tiens Ã  remercier _who qui a Ã©tÃ© assez bon dans la rencontre d&rsquo;erreurs <img src="http://rkueny.fr/wp-includes/images/smilies/icon_smile.gif" alt=":)" class="wp-smiley" /> Et du coup, cela nous a permis de les rÃ©soudre. Ainsi :
</p>

<p style="text-align: left;">
  <strong>Quelques erreurs ou les pÃ©ripÃ©ties de _who !</strong>
</p>

<p style="text-align: left;">
  Si vous avez :
</p>

<pre style="text-align: left;">(#2500) An active access token must be used to query information about the current user.</pre>

<p style="text-align: left;">
  Cela provient surement du fait que vous tentez d&rsquo;accÃ©der Ã  un utilisateur inactif ou inexistant. VÃ©rifiez vos donnÃ©es (clÃ©s et id de l&rsquo;appli). Cela arrive typiquement lorsque vous utilisez la mÃ©thode api(&lsquo;/me&rsquo;) sans Ãªtre connectÃ©. Cette erreur est Ã©vitÃ© en ajoutant la vÃ©rification sur $session avant d&rsquo;appeler la mÃ©thode api(&lsquo;/me&rsquo;) (comme dans l&rsquo;exemple fourni).
</p>

<p style="text-align: left;">
  La deuxiÃ¨me erreur rencontrÃ© est une erreur sans dÃ©tail <img src="http://rkueny.fr/wp-includes/images/smilies/icon_smile.gif" alt=":)" class="wp-smiley" /> Juste le mot erreur. Cela provient du fait que Facebook n&rsquo;arrive pas Ã  accÃ©der Ã  votre serveur distant. Cela peut par exemple venir du fait que votre routeur ne forward pas ou/et que les identifiants de connexion (clÃ©s et id) ne sont pas corrects.
</p>

<p style="text-align: left;">
  Lorsque des erreurs seront rencontrÃ©es et rÃ©solues, je mettrais Ã  jour cette partie.
</p>

<p style="text-align: left;">
  Enfin, comme je l&rsquo;ai dÃ©jÃ  dit n&rsquo;hÃ©sitez pas Ã  Ã©crire vos remarques/questions en commentaires de ce billet. Pour ce qui est des &laquo;&nbsp;bugs&nbsp;&raquo; je prÃ©fÃ¨re que vous passiez via GitHub. Au pire, vous pouvez passer par les commentaires. Je ne rÃ©pondrai pas aux questions par mail en revanche <img src="http://rkueny.fr/wp-includes/images/smilies/icon_smile.gif" alt=":)" class="wp-smiley" />
</p>

<p style="text-align: left;">
  <strong>Et la suite ?</strong>
</p>

<p style="text-align: left;">
  Il y aura d&rsquo;autres billets sur la nouvelle API de Facebook. Il y en aura un sur l&rsquo;intÃ©gration d&rsquo;une application sur la plateforme (via Iframe) et aussi <a title="Fbconnect php facebook" href="http://rkueny.fr/non-classe/continuons-avec-les-applications-facebook-mais-full-php-cette-fois" target="_blank">un petit pour l&rsquo;identification via PHP pour le FBConnect.</a>
</p>

<p style="text-align: left;">
  See you later <img src="http://rkueny.fr/wp-includes/images/smilies/icon_wink.gif" alt=";)" class="wp-smiley" />
</p>

<p style="text-align:center">
  <br />
</p>
</fb:login-button></p></body></p>
:ET